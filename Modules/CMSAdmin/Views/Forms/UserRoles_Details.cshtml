@model ACMSDBView.UserRolesViewModel

<script type="text/javascript">


    function on_UserRole_iRoleID_Changed()
    {
        try
        {
            var cboControl = document.getElementById("UserRole_iRoleID");
            var selectedText = cboControl[cboControl.selectedIndex].text;
            
            var oHiddenField = document.getElementById("UserRole_sRoleID");
            oHiddenField.value = selectedText;

        }
        catch (e) {
            alert(e);
        }
    }

  
</script>



<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 border_bottom_solid_1x">
            @if (ViewBag.bAddNew)
            {
                <h2>You are ready to create a new User Access Role</h2>
            }
            else
            {
                <h2>You are editing - @Model.UserRole.sRoleID</h2>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            &nbsp;
        </div>
    </div>

    <div class="row">
        @if (ViewBag.bError == true)
        {
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 alert-danger">
                <p>@Html.Raw(ViewBag.sErrorMessage)</p>
            </div>
        }
        else if (ViewBag.bSaved == true)
        {
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 alert-success">
                <p>Your request was processed successfully.</p>
            </div>
        }
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <p>@Html.ActionLink("Click here", "UserRoles_List", new { _iParentID = ViewBag.iParentID, _sParentID = ViewBag.sParentID }) to return to the list.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            &nbsp;
        </div>
    </div>

    <div class="row">
        <div class="col-lg-10 col-md-10 col-sm-12 col-xs-12 offset-lg-1 offset-md-1 ">
            @using (Html.BeginForm("UserRoles_AddUpdate", "", FormMethod.Post))
            {
                @Html.ValidationSummary(true);

                @Html.HiddenFor(model => model.UserRole.ID)
                @Html.HiddenFor(model => model.UserRole.iParentID)
                @Html.HiddenFor(model => model.UserRole.sParentID)
                @Html.HiddenFor(model => model.UserRole.sControl)
                @Html.HiddenFor(model => model.UserRole.dtDateCreated)
                @Html.HiddenFor(model => model.UserRole.dtLastUpdated)
                @Html.HiddenFor(model => model.UserRole.iCreatedByID)
                @Html.HiddenFor(model => model.UserRole.sCreatedByID)
                @Html.HiddenFor(model => model.UserRole.iUpdatedByID)
                @Html.HiddenFor(model => model.UserRole.sUpdatedByID)
                @Html.HiddenFor(model => model.UserRole.sRoleID)

                <fieldset>
                    <legend></legend>


                    <div class="form-group">
                        <label for="UserRole_iRoleID">Role :</label>
                        @Html.DropDownListFor(model => model.UserRole.iRoleID, Model.SecurityRoles, new { @Class = "form-control", @onchange = "javascript:on_UserRole_iRoleID_Changed();" })
                        @if (ViewBag.bError == true)
                        {
                            @Html.ValidationMessageFor(model => model.UserRole.iRoleID, "*Required!")
                        }
                    </div>

                </fieldset>
                <div class="form-group">
                    @if (ViewBag.bAddNew == true)
                    {
                        <input type="submit" value="Update" name="submit" class="btn btn-block btn-outline-primary" />
                    }
                    else
                    {
                        <input type="submit" value="Update" name="submit" class="btn btn-block btn-outline-primary" />
                    }
                </div>
            }
            
        </div>
    </div>
</div>





